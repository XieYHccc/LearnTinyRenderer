struct GouraudShader : public IShader {
    mat<2, 3, float> varying_uv;              // same as above
    mat<3, 3, float> varying_vPos_viewspace;
    mat<4, 4, float> uniform_mvp;             // Projection*ModelView
    mat<4, 4, float> uniform_view;
    mat<4, 4, float> uniform_modelview_invtran;     // (Projection*ModelView).invert_transpose()

    virtual Vec4f vertex(int iface, int nthvert) {
        Vec4f in_vertex = embed<4>(model->vert(iface, nthvert)); // read the vertex from .obj file
        Vec4f gl_Vertex = Viewport * uniform_mvp * in_vertex;     // transform it to screen coordinates
        varying_uv.set_col(nthvert, model->uv(iface, nthvert));
        varying_vPos_viewspace.set_col(nthvert, proj<3>(uniform_view * in_vertex));
        return gl_Vertex;
    }

    virtual bool fragment(Vec3f bar, TGAColor& out_color) {
        // light calculation in view space
        Vec2f uv = varying_uv * bar;                 // interpolate uv for the current pixel
        Vec3f fragPos = varying_vPos_viewspace * bar;       // interpolate world space position for the current pixel
        // caution!! vector can't be translated, set w to 0.
        Vec3f n = proj<3>(uniform_modelview_invtran * embed<4>(model->normal(uv), 0.f)).normalize();
        Vec3f l = proj<3>(uniform_view * embed<4>(light_dir, 0.f)).normalize(); 
        Vec3f r = reflect(n, l).normalize();
        Vec3f viewPos = proj<3>(uniform_view * embed<4>(eye, 1.f));
        Vec3f viewDir = (viewPos - fragPos).normalize();
        TGAColor color = model->diffuse(uv);
        // ambient
        TGAColor ambient = color * 0.1;
        // diffuse
        float diff = std::max(0.f, n * l );
        TGAColor diffuse = color * diff;
        // specular
        float spec = std::pow(std::max(0.f, viewDir * r), model->specular(uv));
        TGAColor specular = TGAColor(255, 255, 255) * spec * 0.4f;

        for(int i = 0; i < 3; i++) out_color[i] = std::min<int>(ambient[i] + diffuse[i] + specular[i], 255);
        return false;                              // no, we do not discard this pixel
    }
};